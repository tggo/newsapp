// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	model "boostersNews/internal/news/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, post
func (_m *Repository) Create(ctx context.Context, post *model.Post) (int64, error) {
	ret := _m.Called(ctx, post)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) int64); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, f
func (_m *Repository) Find(ctx context.Context, f *model.Filter) ([]*model.Post, error) {
	ret := _m.Called(ctx, f)

	var r0 []*model.Post
	if rf, ok := ret.Get(0).(func(context.Context, *model.Filter) []*model.Post); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Filter) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id int64) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LazyDelete provides a mock function with given fields: ctx, id
func (_m *Repository) LazyDelete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, post
func (_m *Repository) Update(ctx context.Context, id int64, post *model.Post) error {
	ret := _m.Called(ctx, id, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.Post) error); ok {
		r0 = rf(ctx, id, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
