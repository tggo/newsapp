openapi: "3.0.0"
info:
  title: Boosters news server API
  version: "0.0.1"
  description: Implement API test server
  termsOfService: https://en.wikipedia.org/wiki/Terms_of_service
  license:
    name: Apache 2.0
servers:
  - url: /
    description: localtest
  - url: https:/development.server.com/{basePath}
    description: Development Server
    variables:
      basePath:
        default: v1
  - url: https://booster.news.com/{basePath}
    description: Production Server
    variables:
      basePath:
        default: v1
tags:
  - name: News
    description:
      all about news posts

paths:
  /posts:
    post:
      tags:
        - News
      summary: Create news post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostRequestBody'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
    get:
      tags:
        - News
      summary: Get news list
      responses:
        200:
          description: return list posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostsResponse'
  /posts/{id}:
    put:
      tags:
        - News
      summary: Update news post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: Post ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPostRequestBody'
      responses:
        200:
          $ref: "#/components/responses/SuccessResponse"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"

    get:
      tags:
        - News
      summary: Get one news post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: Post ID
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnePostResponse'
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"

    delete:
      tags:
        - News
      summary: Delete news post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: Post ID
      responses:
        200:
          $ref: "#/components/responses/SuccessResponse"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"



components:
  schemas:
    NewsPostRequestBody:
      $ref: '#/components/schemas/Post'
    Post:
      type: object
      required:
        - id
        - title
        - content
        - created_at
      properties:
        id:
          type: integer
          description: Post ID
          format: int64
          x-go-custom-tag: binding:"required"
          x-go-name: ID
        created_at:
          type: integer
          description: created at timestamp
          x-go-custom-tag: binding:"required"
          format: int64
        updated_at:
          type: integer
          description: created at timestamp
          format: int64
        title:
          type: string
          x-go-custom-tag: binding:"required"
          description: post title
        content:
          type: string
          x-go-custom-tag: binding:"required"
          description: post content, can be empty on post list
    OnePostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    ListPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    SuccessResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: OK
          description: Request status.
        message:
          type: string
          description: information description
        data:
          type: object
          description: any data response, if need
    BadResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: ERROR
          description: Request status.
        message:
          type: string
          description: error description
        data:
          type: object
          description: Data
          properties:
            errors:
              type: object
              description: error object


  responses:
    NotFoundError:
      description: ID in request not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadResponse'
          example:
            status: ERROR
            message: ID not found

    BadRequestError:
      description: Query or path params invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadResponse'
          example:
            status: ERROR
            message: description of error
    SuccessResponse:
      description: Success response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
          example:
            status: OK
